package member.dao;


import java.util.Map;

import org.apache.ibatis.session.SqlSession;

import member.vo.MemberVO;
import util.MyBatisUtil;

public class MemberDaoImpl implements IMemberDao{
	private static MemberDaoImpl dao;

	private MemberDaoImpl() {
		
	}
	
	public static MemberDaoImpl getInstance() {
		if(dao==null) dao = new MemberDaoImpl();
		return dao;
	}

	@Override
	public MemberVO login(MemberVO memVo) {
		SqlSession session = null;
		MemberVO memInfo = null;
		try {
			session = MyBatisUtil.getSqlSession();
			String id = memVo.getMem_id().substring(0, 1);
			if(id.equals("p")) {
				memInfo = session.selectOne("member.loginPro", memVo);
			} else if(id.equals("a")) {
				memInfo = session.selectOne("member.loginAdm", memVo);
			} else {
				memInfo = session.selectOne("member.loginStu", memVo);
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			if(session!=null)try{session.close();}catch(Exception e) {e.printStackTrace();}
		}
		return memInfo;
	}

	@Override
	public String stuIdCreate(Map<String, Object> map) {
		SqlSession session = null;
		String stu_id = null;
		try {
			session = MyBatisUtil.getSqlSession();
			stu_id = session.selectOne("member.stu_id", map);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			if(session!=null)try{session.close();}catch(Exception e) {e.printStackTrace();}
		}
		return stu_id;
	}

	@Override
	public int insertMember(MemberVO memVo) {
		SqlSession session = null;
		int cnt = 0;
		try {
			session = MyBatisUtil.getSqlSession();
			cnt = session.insert("member.signUp", memVo);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			session.commit();
			session.close();
		}
		return cnt;
	}

	@Override
	public int insertStudent(MemberVO memVo) {
		SqlSession session = null;
		int cnt = 0;
		try {
			session = MyBatisUtil.getSqlSession();
			cnt = session.insert("member.stuSignUp", memVo);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			session.commit();
			session.close();
		}
		return cnt;
	}

	@Override
	public String proIdCreate(MemberVO memVo) {
		SqlSession session = null;
		String pro_id = null;
		try {
			session = MyBatisUtil.getSqlSession();
			pro_id = session.selectOne("member.pro_id", memVo);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			if(session!=null)try{session.close();}catch(Exception e) {e.printStackTrace();}
		}
		return pro_id;
	}

	@Override
	public String admIdCreate(String mem_mail) {
		SqlSession session = null;
		String adm_id = null;
		try {
			session = MyBatisUtil.getSqlSession();
			adm_id = session.selectOne("member.adm_id", mem_mail);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			if(session!=null)try{session.close();}catch(Exception e) {e.printStackTrace();}
		}
		return adm_id;
	}

	@Override
	public int insertProfessor(MemberVO memVo) {
		SqlSession session = null;
		int cnt = 0;
		try {
			session = MyBatisUtil.getSqlSession();
			cnt = session.insert("member.proSignUp", memVo);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			session.commit();
			session.close();
		}
		return cnt;
	}

	@Override
	public int insertAdmin(MemberVO memVo) {
		SqlSession session = null;
		int cnt = 0;
		try {
			session = MyBatisUtil.getSqlSession();
			cnt = session.insert("member.admSignUp", memVo);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			session.commit();
			session.close();
		}
		return cnt;
	}

	/**
	 * 회원 정보를 변경하는 메서드 memVo (mem_tel, mem_mail, mem_add)
	 */
	@Override
	public int memInfoChange(MemberVO memVo) {
		SqlSession session = null;
		int cnt = 0;
		try {
			session = MyBatisUtil.getSqlSession();
			cnt = session.update("member.memInfoChange", memVo);
			if(cnt > 0) {
				session.commit();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return cnt;
	}

	/**
	 * 회원 비밀번호를 확인하는 메서드
	 */
	@Override
	public String pwChk(MemberVO memVo) {
		SqlSession session = null;
		String result = "";
		try {
			session = MyBatisUtil.getSqlSession();
			result = session.selectOne("member.pwChk", memVo);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return result;
	}
	/**
	 * 회원 정보를 변경하는 메서드
	 * @param memVo (mem_id,  mem_pass)
	 * @return
	 */
	@Override
	public int memPwChange(MemberVO memVo) {
		SqlSession session = null;
		int cnt = 0;
		try {
			session = MyBatisUtil.getSqlSession();
			cnt = session.update("member.memPwChange", memVo);
			if(cnt > 0) {
				session.commit();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return cnt;
	}


}
